[[ldap-auth-provider, LDAP authentication provider for Rudder]]
==== Configuring an LDAP authentication provider for Rudder

If you are operating on a corporate network or want to have your users in a
centralized database, there is a solution for you.

Since Rudder uses the SpringSecurity framework, you are able to connect to a
wide range of authentication providers.

We will take LDAP as an example, however bear in mind that this procedure
requires that you make modifications to your application that an update will
replace, we do not officially support it yet.


Also take care of the following limitation of the current process: only *authentication*
is delegated to LDAP, NOT *authorizations*. So you still have to
declare user's authorizations in the Rudder user file (rudder-users.xml).

An user whose authentication is accepted by LDAP but not declared in the
rudder-users.xml file is considered to have no rights at all (and so will
only see a reduced version of Rudder homepage, with no action nor tabs available).

If you really want to test this feature, follow this procedure:

First, unzip your webapp to be able to modify some files inside it

----

cd /opt/rudder/jetty7/webapps
mv rudder.war /root
mkdir rudder.war
cd rudder.war && unzip /root/rudder.war

----

Then use your favorite editor to edit /opt/rudder/jetty7/webapps/rudder.war/WEB-INF/classes/applicationContext-security.xml
to change <authentication-provider ref="demoAuthenticationProvider"/> to <authentication-provider ref="ldapAuthenticationProvider"/>
and paste the following code block below </authentication-manager> :

----

<beans:bean id="contextSource"
        class="org.springframework.security.ldap.DefaultSpringSecurityContextSource">
  <beans:constructor-arg value="ldap://ldap.mycorp.com:389/dc=mycorp,dc=com"/>
  <beans:property name="userDn" value="cn=Rudder,ou=AppOU,dc=mycorp,dc=com"/>
  <beans:property name="password" value="myverysecretpassword"/>
</beans:bean>

<beans:bean id="ldapAuthenticationProvider"
    class="org.springframework.security.ldap.authentication.LdapAuthenticationProvider">
 <beans:constructor-arg>
   <beans:bean class="org.springframework.security.ldap.authentication.BindAuthenticator">
     <beans:constructor-arg ref="contextSource"/>
     <beans:property name="userDnPatterns">
       <beans:list><beans:value>uid={0},ou=people</beans:value></beans:list>
     </beans:property>
   </beans:bean>
 </beans:constructor-arg>
 <beans:property name="userDetailsContextMapper" ref="rudderXMLUserDetails"/>
</beans:bean>

----

You will have to adjust the ldap URI, the userDn and password to the appropriate values for your infrastructure.

And you are all done !

[TIP]

====

This procedure is still hacky, we are considering several solutions to have a standardized procedure that does not require
to touch the WAR archive and just edit some configuration files.

====


[TIP]

====

It is a best practice to use authenticated connection in place of anonymous one, even for application. 
Nonetheless, if you want to use an anonymous connection to your LDAP server, you can replace the two lines
about beans:property userDn and password in contextSource by the line:

<beans:property name="anonymousReadOnly" value="true"/>

====

